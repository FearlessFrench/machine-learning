{"metadata":{"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":90391,"databundleVersionId":10504154,"sourceType":"competition"}],"dockerImageVersionId":30805,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true},"colab":{"provenance":[{"file_id":"1vG8_D7RYleCcaoyq91UqGeRcM0C4pPqs","timestamp":1735637189243},{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/flower-classification-template-041f0267-5d33-4ed4-9123-7f19ab26161b.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20241216/auto/storage/goog4_request&X-Goog-Date=20241216T083324Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=81eb11940575e03b7ff8b79abbd96132e6579ff7ad7038c327bf55ed261df72cb87d6701c521940fd6f4445b2a5d214bb3cd14ccf6cd574acdee7b9c8a0ae54d78427b5a292363405fcc392c760e0d2014a52dc0c1418edb06d1e965ee92da201c79ebddeb02451d01201402d3b2a3d693619725a2cb7b0f79871aa7aa23c0187ed037c8262d02bba93fd455dee8c7edb515f9f4e35e145e5e913a0197da1aa9c253f075c0007ced82103ddcd7d7aadf6f1838ee614abe6019f9106223747670b26ccbc4050d68bb0810b51ef7dfb2c8058a2584651533c7c607af1063b19faa766f9fd9471cd457e1e145bcaadabe2ee73cc21cef901f49ba6a83ffefff2fa9","timestamp":1734338192377}],"gpuType":"T4"},"accelerator":"GPU"},"nbformat_minor":0,"nbformat":4,"cells":[{"cell_type":"markdown","source":["ให้ copy cell จาก colab notebook ไปใส่ไว้ใน Kaggle notebook"],"metadata":{"id":"PMcwsnPBnAfS"}},{"cell_type":"code","source":["import tensorflow as tf\n","# Keras is part of TensorFlow, so if TensorFlow is installed, Keras is too.\n","# Check the Keras version\n","tf.keras.__version__"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"id":"biqIGdN5Ph5K","executionInfo":{"status":"ok","timestamp":1735674208093,"user_tz":-420,"elapsed":373,"user":{"displayName":"Christopher French","userId":"08895080845636508937"}},"outputId":"eea85b63-b502-4da3-e37c-d34d6dafb8e5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'3.5.0'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eYnTDPXLNj94","executionInfo":{"status":"ok","timestamp":1735728449619,"user_tz":-420,"elapsed":71358,"user":{"displayName":"Christopher French","userId":"08895080845636508937"}},"outputId":"9f132758-58cc-4147-d4f7-f58ad8a66b71"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["# import keras dataloader\n","import tensorflow as tf\n","\n","img_w = 224\n","img_h = 224\n","batch_size = 16\n","\n","\n","train_ds = tf.keras.utils.image_dataset_from_directory(\n","  \"/content/drive/MyDrive/Flower Classification/train\",\n","  validation_split=0.2,\n","  subset=\"training\",\n","  seed=123,\n","  image_size=(img_w, img_h),\n","  batch_size=batch_size)\n","\n","val_ds = tf.keras.utils.image_dataset_from_directory(\n","  \"/content/drive/MyDrive/Flower Classification/train\",\n","  validation_split=0.2,\n","  subset=\"validation\",\n","  seed=123,\n","  image_size=(img_w, img_h),\n","  batch_size=batch_size)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T07:59:55.798578Z","iopub.execute_input":"2024-12-16T07:59:55.798931Z","iopub.status.idle":"2024-12-16T08:00:03.536455Z","shell.execute_reply.started":"2024-12-16T07:59:55.798896Z","shell.execute_reply":"2024-12-16T08:00:03.535775Z"},"id":"OD5B26S8mesS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1735678861982,"user_tz":-420,"elapsed":3483,"user":{"displayName":"Christopher French","userId":"08895080845636508937"}},"outputId":"66717d5d-e210-4ca7-dbf5-ca6fd6df9205"},"outputs":[{"output_type":"stream","name":"stdout","text":["Found 6552 files belonging to 102 classes.\n","Using 5242 files for training.\n","Found 6552 files belonging to 102 classes.\n","Using 1310 files for validation.\n"]}],"execution_count":null},{"cell_type":"code","source":["# Import required libraries\n","import tensorflow as tf\n","from tensorflow.keras import datasets, layers, models, regularizers\n","\n","# Define image dimensions and batch size\n","img_w, img_h = 224, 224\n","batch_size = 16\n","\n","# Load datasets with data augmentation\n","data_augmentation = tf.keras.Sequential([\n","    layers.RandomFlip(\"horizontal_and_vertical\"),\n","    layers.RandomRotation(0.2),\n","    layers.RandomZoom(0.2),\n","    layers.RandomContrast(0.2)\n","])\n","\n","train_ds = tf.keras.utils.image_dataset_from_directory(\n","    \"/content/drive/MyDrive/Flower Classification/train\",\n","    validation_split=0.2,\n","    subset=\"training\",\n","    seed=123,\n","    image_size=(img_w, img_h),\n","    batch_size=batch_size\n",").map(lambda x, y: (data_augmentation(x), y))\n","\n","val_ds = tf.keras.utils.image_dataset_from_directory(\n","    \"/content/drive/MyDrive/Flower Classification/train\",\n","    validation_split=0.2,\n","    subset=\"validation\",\n","    seed=123,\n","    image_size=(img_w, img_h),\n","    batch_size=batch_size\n",")\n","\n","# Enable caching and prefetching to improve training performance\n","train_ds = train_ds.prefetch(buffer_size=tf.data.AUTOTUNE)\n","val_ds = val_ds.prefetch(buffer_size=tf.data.AUTOTUNE)\n","\n","# Define the model architecture\n","model = models.Sequential([\n","    layers.Conv2D(64, (3, 3), activation='relu', input_shape=(img_w, img_h, 3)),\n","    layers.BatchNormalization(),\n","    layers.MaxPooling2D((2, 2)),\n","    layers.Dropout(0.25),\n","\n","    layers.Conv2D(128, (3, 3), activation='relu', kernel_regularizer=regularizers.l2(0.01)),\n","    layers.BatchNormalization(),\n","    layers.MaxPooling2D((2, 2)),\n","    layers.Dropout(0.25),\n","\n","    layers.Conv2D(256, (3, 3), activation='relu', kernel_regularizer=regularizers.l2(0.01)),\n","    layers.BatchNormalization(),\n","    layers.MaxPooling2D((2, 2)),\n","    layers.Dropout(0.25),\n","\n","    layers.Conv2D(512, (3, 3), activation='relu', kernel_regularizer=regularizers.l2(0.01)),\n","    layers.BatchNormalization(),\n","    layers.GlobalAveragePooling2D(),\n","    layers.Dropout(0.5),\n","\n","    layers.Dense(1024, activation='relu'),\n","    layers.Dropout(0.5),\n","    layers.Dense(102, activation='softmax')\n","])\n","\n","# Compile the model\n","model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),\n","              loss=tf.keras.losses.SparseCategoricalCrossentropy(),\n","              metrics=['accuracy'])\n","\n","from tensorflow.keras.callbacks import EarlyStopping\n","early_stopping = EarlyStopping(\n","    monitor='val_loss',  # Monitor validation loss\n","    patience=10,          # Stop if no improvement after 10 epochs\n","    restore_best_weights=True  # Restore the best model weights\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pHOAJnOfQT2h","executionInfo":{"status":"ok","timestamp":1735730783946,"user_tz":-420,"elapsed":7753,"user":{"displayName":"Christopher French","userId":"08895080845636508937"}},"outputId":"8ef9455a-9d70-404a-acf0-10928a79040d"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 6552 files belonging to 102 classes.\n","Using 5242 files for training.\n","Found 6552 files belonging to 102 classes.\n","Using 1310 files for validation.\n"]}]},{"cell_type":"code","source":["# Train the model\n","history = model.fit(train_ds, epochs=200, validation_data=val_ds, callbacks=[early_stopping])\n","\n","# Save the model for submission predictions\n","model.save(\"/content/drive/MyDrive/Flower Classification/flower_classifier_model.h5\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QG2KorQinVMc","outputId":"c91121b2-e253-426c-8304-097503b7e54a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m150s\u001b[0m 409ms/step - accuracy: 0.0616 - loss: 7.9170 - val_accuracy: 0.1053 - val_loss: 4.7062\n","Epoch 2/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m161s\u001b[0m 323ms/step - accuracy: 0.0965 - loss: 4.7080 - val_accuracy: 0.1382 - val_loss: 4.5440\n","Epoch 3/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m103s\u001b[0m 315ms/step - accuracy: 0.1116 - loss: 4.6543 - val_accuracy: 0.1321 - val_loss: 4.4479\n","Epoch 4/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m148s\u001b[0m 335ms/step - accuracy: 0.1366 - loss: 4.5180 - val_accuracy: 0.1924 - val_loss: 4.1896\n","Epoch 5/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m106s\u001b[0m 324ms/step - accuracy: 0.1438 - loss: 4.3558 - val_accuracy: 0.0634 - val_loss: 5.7324\n","Epoch 6/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m147s\u001b[0m 340ms/step - accuracy: 0.1447 - loss: 4.2070 - val_accuracy: 0.1298 - val_loss: 4.9966\n","Epoch 7/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m103s\u001b[0m 313ms/step - accuracy: 0.1519 - loss: 4.1258 - val_accuracy: 0.1282 - val_loss: 4.6543\n","Epoch 8/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m109s\u001b[0m 332ms/step - accuracy: 0.1659 - loss: 4.0579 - val_accuracy: 0.1580 - val_loss: 4.4366\n","Epoch 9/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m104s\u001b[0m 317ms/step - accuracy: 0.1601 - loss: 4.0508 - val_accuracy: 0.0962 - val_loss: 6.0060\n","Epoch 10/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m106s\u001b[0m 323ms/step - accuracy: 0.1738 - loss: 3.9699 - val_accuracy: 0.1412 - val_loss: 4.4268\n","Epoch 11/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m104s\u001b[0m 317ms/step - accuracy: 0.1877 - loss: 3.9473 - val_accuracy: 0.1534 - val_loss: 4.3708\n","Epoch 12/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m142s\u001b[0m 316ms/step - accuracy: 0.1882 - loss: 3.9141 - val_accuracy: 0.1832 - val_loss: 3.9831\n","Epoch 13/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m144s\u001b[0m 321ms/step - accuracy: 0.1878 - loss: 3.8819 - val_accuracy: 0.2145 - val_loss: 3.7026\n","Epoch 14/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m142s\u001b[0m 322ms/step - accuracy: 0.2093 - loss: 3.7754 - val_accuracy: 0.1649 - val_loss: 4.2558\n","Epoch 15/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m141s\u001b[0m 318ms/step - accuracy: 0.1974 - loss: 3.8174 - val_accuracy: 0.1359 - val_loss: 4.5911\n","Epoch 16/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m103s\u001b[0m 312ms/step - accuracy: 0.2108 - loss: 3.7268 - val_accuracy: 0.2679 - val_loss: 3.4710\n","Epoch 17/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m105s\u001b[0m 318ms/step - accuracy: 0.2282 - loss: 3.6837 - val_accuracy: 0.1985 - val_loss: 3.9171\n","Epoch 18/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m144s\u001b[0m 324ms/step - accuracy: 0.2330 - loss: 3.5730 - val_accuracy: 0.1855 - val_loss: 3.9016\n","Epoch 19/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m145s\u001b[0m 333ms/step - accuracy: 0.2463 - loss: 3.5084 - val_accuracy: 0.1878 - val_loss: 4.0601\n","Epoch 20/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m104s\u001b[0m 317ms/step - accuracy: 0.2521 - loss: 3.4731 - val_accuracy: 0.2641 - val_loss: 3.4087\n","Epoch 21/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m142s\u001b[0m 316ms/step - accuracy: 0.2445 - loss: 3.4384 - val_accuracy: 0.2687 - val_loss: 3.4142\n","Epoch 22/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m106s\u001b[0m 322ms/step - accuracy: 0.2624 - loss: 3.3509 - val_accuracy: 0.2863 - val_loss: 3.2552\n","Epoch 23/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m147s\u001b[0m 336ms/step - accuracy: 0.2719 - loss: 3.2545 - val_accuracy: 0.2817 - val_loss: 3.2338\n","Epoch 24/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m104s\u001b[0m 318ms/step - accuracy: 0.2852 - loss: 3.2432 - val_accuracy: 0.2107 - val_loss: 3.7608\n","Epoch 25/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m141s\u001b[0m 314ms/step - accuracy: 0.2962 - loss: 3.1293 - val_accuracy: 0.1885 - val_loss: 4.2453\n","Epoch 26/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m103s\u001b[0m 314ms/step - accuracy: 0.2841 - loss: 3.1716 - val_accuracy: 0.1687 - val_loss: 4.4957\n","Epoch 27/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m104s\u001b[0m 316ms/step - accuracy: 0.2937 - loss: 3.1001 - val_accuracy: 0.3092 - val_loss: 3.1408\n","Epoch 28/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m141s\u001b[0m 313ms/step - accuracy: 0.3022 - loss: 3.0726 - val_accuracy: 0.3298 - val_loss: 3.1566\n","Epoch 29/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m105s\u001b[0m 319ms/step - accuracy: 0.3120 - loss: 3.0385 - val_accuracy: 0.3550 - val_loss: 2.9622\n","Epoch 30/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m103s\u001b[0m 314ms/step - accuracy: 0.3358 - loss: 2.9656 - val_accuracy: 0.3740 - val_loss: 2.7453\n","Epoch 31/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m142s\u001b[0m 314ms/step - accuracy: 0.3378 - loss: 2.9285 - val_accuracy: 0.3183 - val_loss: 3.3036\n","Epoch 32/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m105s\u001b[0m 319ms/step - accuracy: 0.3316 - loss: 2.8876 - val_accuracy: 0.3511 - val_loss: 2.9604\n","Epoch 33/200\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m147s\u001b[0m 335ms/step - accuracy: 0.3617 - loss: 2.8870 - val_accuracy: 0.4076 - val_loss: 2.6902\n","Epoch 34/200\n","\u001b[1m160/328\u001b[0m \u001b[32m━━━━━━━━━\u001b[0m\u001b[37m━━━━━━━━━━━\u001b[0m \u001b[1m49s\u001b[0m 295ms/step - accuracy: 0.3316 - loss: 2.8765"]}]},{"cell_type":"code","source":["# Test set predictions\n","test_ds = tf.keras.utils.image_dataset_from_directory(\n","    \"/content/drive/MyDrive/Flower Classification/test\",\n","    image_size=(img_w, img_h),\n","    batch_size=batch_size,\n","    shuffle=False\n",")\n","\n","predictions = model.predict(test_ds)\n","predicted_classes = tf.argmax(predictions, axis=1)\n","\n","# Save predictions for submission\n","import pandas as pd\n","import os\n","\n","test_image_names = [os.path.basename(file_path.numpy().decode('utf-8')) for file_path in test_ds.file_paths]\n","submission = pd.DataFrame({\"image\": test_image_names, \"class\": predicted_classes.numpy()})\n","submission.to_csv(\"/kaggle/working/submission.csv\", index=False)\n"],"metadata":{"id":"vBMr9vtcudiJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["history = model.fit(train_ds, epochs=20, validation_data=val_ds)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GGDyN0JrQX7L","executionInfo":{"status":"ok","timestamp":1735676303296,"user_tz":-420,"elapsed":1863800,"user":{"displayName":"Christopher French","userId":"08895080845636508937"}},"outputId":"89c61151-7a8f-4b62-89c7-714902e72499"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1065s\u001b[0m 3s/step - accuracy: 0.0684 - loss: 5.0283 - val_accuracy: 0.0435 - val_loss: 20.0534\n","Epoch 2/20\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 123ms/step - accuracy: 0.1356 - loss: 4.2384 - val_accuracy: 0.0679 - val_loss: 8.2740\n","Epoch 3/20\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m37s\u001b[0m 112ms/step - accuracy: 0.2019 - loss: 3.6414 - val_accuracy: 0.2710 - val_loss: 3.1000\n","Epoch 4/20\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m45s\u001b[0m 124ms/step - accuracy: 0.3007 - loss: 2.9685 - val_accuracy: 0.2565 - val_loss: 3.1448\n","Epoch 5/20\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m35s\u001b[0m 108ms/step - accuracy: 0.3969 - loss: 2.4353 - val_accuracy: 0.3443 - val_loss: 2.7601\n","Epoch 6/20\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 106ms/step - accuracy: 0.5122 - loss: 1.8494 - val_accuracy: 0.3847 - val_loss: 2.5556\n","Epoch 7/20\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 106ms/step - accuracy: 0.5793 - loss: 1.5052 - val_accuracy: 0.3137 - val_loss: 3.3180\n","Epoch 8/20\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 106ms/step - accuracy: 0.5051 - loss: 1.8416 - val_accuracy: 0.2405 - val_loss: 4.4370\n","Epoch 9/20\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 109ms/step - accuracy: 0.6031 - loss: 1.4083 - val_accuracy: 0.3924 - val_loss: 2.6973\n","Epoch 10/20\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 108ms/step - accuracy: 0.7811 - loss: 0.7345 - val_accuracy: 0.4084 - val_loss: 2.5938\n","Epoch 11/20\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 107ms/step - accuracy: 0.8353 - loss: 0.5420 - val_accuracy: 0.4137 - val_loss: 2.6020\n","Epoch 12/20\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m37s\u001b[0m 111ms/step - accuracy: 0.8915 - loss: 0.3772 - val_accuracy: 0.4229 - val_loss: 2.6481\n","Epoch 13/20\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m35s\u001b[0m 106ms/step - accuracy: 0.8981 - loss: 0.3209 - val_accuracy: 0.4427 - val_loss: 2.7170\n","Epoch 14/20\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 108ms/step - accuracy: 0.9172 - loss: 0.2741 - val_accuracy: 0.3458 - val_loss: 3.4506\n","Epoch 15/20\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 125ms/step - accuracy: 0.9056 - loss: 0.3180 - val_accuracy: 0.3718 - val_loss: 3.0769\n","Epoch 16/20\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 124ms/step - accuracy: 0.9271 - loss: 0.2520 - val_accuracy: 0.3534 - val_loss: 3.3722\n","Epoch 17/20\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m36s\u001b[0m 109ms/step - accuracy: 0.9499 - loss: 0.1697 - val_accuracy: 0.4153 - val_loss: 2.9897\n","Epoch 18/20\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 108ms/step - accuracy: 0.9668 - loss: 0.1165 - val_accuracy: 0.4053 - val_loss: 3.2076\n","Epoch 19/20\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 109ms/step - accuracy: 0.9333 - loss: 0.1940 - val_accuracy: 0.0344 - val_loss: 17.0023\n","Epoch 20/20\n","\u001b[1m328/328\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 109ms/step - accuracy: 0.8966 - loss: 0.3314 - val_accuracy: 0.3298 - val_loss: 3.9398\n"]}]},{"cell_type":"code","source":["import numpy as np\n","import os\n","from keras.preprocessing import image\n","\n","test_folder_path = \"/content/drive/MyDrive/Flower Classification/test\"\n","\n","with open('/content/drive/MyDrive/Flower Classification/submission_template.csv') as fin:\n","    lines = fin.readlines()\n","    # predictions are stored as array with ID=image_name and Prediction=model's prediction\n","    predictions = {}\n","    for line in lines[1:]:\n","        img_name = line.split(',')[0]\n","        # load the image\n","        img = os.path.join(test_folder_path, img_name)\n","        img = image.load_img(img, target_size=(img_w, img_h))\n","        img = image.img_to_array(img)\n","        img = np.expand_dims(img, axis=0)\n","        predictions[img_name] = np.argmax(model.predict(img, verbose=0))"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T08:05:35.005992Z","iopub.execute_input":"2024-12-16T08:05:35.006362Z","iopub.status.idle":"2024-12-16T08:06:22.208635Z","shell.execute_reply.started":"2024-12-16T08:05:35.00633Z","shell.execute_reply":"2024-12-16T08:06:22.20786Z"},"id":"gf8QYKNFmesU"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# write the results to \"submission.csv\"\n","with open('submission.csv', 'w') as fout:\n","    str_out = \"ID,Prediction\" + \"\\n\"\n","    fout.write(str_out)\n","    # write model's prediction\n","    for id, pred in predictions.items():\n","        str_out = id + \",\" + str(pred) + \"\\n\"\n","        fout.write(str_out)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-16T08:06:28.78659Z","iopub.execute_input":"2024-12-16T08:06:28.787405Z","iopub.status.idle":"2024-12-16T08:06:28.79342Z","shell.execute_reply.started":"2024-12-16T08:06:28.787354Z","shell.execute_reply":"2024-12-16T08:06:28.792458Z"},"id":"wdGE02o9mesV"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["import pandas as pd\n","submission_df = pd.read_csv('submission.csv')\n","print(submission_df.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gZY8LhkNtOxX","executionInfo":{"status":"ok","timestamp":1735682061595,"user_tz":-420,"elapsed":334,"user":{"displayName":"Christopher French","userId":"08895080845636508937"}},"outputId":"277dca9a-b37e-4e4d-d7be-78636f561e9e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                ID  Prediction\n","0  image_06296.jpg          60\n","1  image_06293.jpg          60\n","2  image_06292.jpg          60\n","3  image_06261.jpg          60\n","4  image_06259.jpg          60\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"rzlgLa-ltnHA"},"execution_count":null,"outputs":[]}]}